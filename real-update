def reachPointOdomRealUpdate():
    global rate
    global current_x, current_y, twist_angle, start_x, start_y, start_angle
    global current_xTF, current_yTF, twist_angleTF  # Make sure these are global variables that get updated by your April tag callback

    rospy.sleep(2)
   # save_off_x = current_x
   # save_off_y = current_y
    # Loop to continuously update destination and move
    while not rospy.is_shutdown():

    # Initial starting position
        start_x = current_x
        start_y = current_y
        start_angle = twist_angleTF
        print(f" current_x : {current_x}, current_y: {current_y}")
    # Destination angle in radians
        destination_theta = np.radians(0)

        # Dynamically update the destination transform using the most recent April tag coordinates
        cumulative_transform = np.array([[math.cos(start_angle), -math.sin(start_angle), 0, start_x],
                                         [math.sin(start_angle), math.cos(start_angle), 0, start_y],
                                         [0, 0, 1, 0],
                                         [0, 0, 0, 1]])
        
        destination_transform = np.array([
            [math.cos(np.radians(0)), -math.sin(np.radians(0)), 0, (current_xTF)],
            [math.sin(np.radians(0)), math.cos(np.radians(0)), 0, current_yTF],
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ])

        # Recalculate cumulative transform and destination each iteration
        cumulative_transform = np.matmul(cumulative_transform, destination_transform)

        # Extract transformed position and orientation
        transformed_x = cumulative_transform[0, 3]
        transformed_y = cumulative_transform[1, 3]
        transformed_theta = math.atan2(cumulative_transform[1, 0], cumulative_transform[0, 0])

        # Calculate error from current to destination
        xythetaArray = transformcoordinates(transformed_x, transformed_y, transformed_theta)
        errorArray = cartesian2polar(xythetaArray[0], xythetaArray[1], xythetaArray[2])
        print(f" error array = rho: {xythetaArray[0]}, alpha: {xythetaArray[1]}, beta: {xythetaArray[2]}")
        # Control output (velocity and angular velocity)
        vw = compute_vw(errorArray[0], errorArray[1], errorArray[2], 0.15, 0.16, -0.12)

        # Apply the velocity limits
        velocity_publisher(vw[0], vw[1])

        # Stop condition for position error
        if abs(errorArray[0]) < 0.45:
            break

        rate.sleep()

    # Stop the robot
    move_cmd = Twist()
    move_cmd.linear.x = 0
    move_cmd.angular.z = 0
    cmd_vel_pub.publish(move_cmd)


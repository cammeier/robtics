def reachPointOdom2():
    global rate
    global current_x, current_y, twist_angle, start_x, start_y, start_angle
    global twist_angleTF, current_yTF, current_xTF
    rospy.sleep(2)
    start_x = current_x
    start_y = current_y
    start_angle = twist_angle

    # Destination angle in radians
    destination_theta = np.radians(0)
    
    # Initialize cumulative transformation for the destination
    cumulative_transform = np.array([[math.cos(start_angle), -math.sin(start_angle), 0, start_x],
                                     [math.sin(start_angle), math.cos(start_angle), 0, start_y],
                                     [0, 0, 1, 0],
                                     [0, 0, 0, 1]])
    destination_transform = np.array([
        [math.cos(np.radians(0)), -math.sin(np.radians(0)), 0, (current_xTF-.20)],
        [math.sin(np.radians(0)), math.cos(np.radians(0)), 0, current_yTF+.15],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ])


    cumulative_transform = np.matmul(cumulative_transform, destination_transform)

    # Extract transformed position and orientation
    transformed_x = cumulative_transform[0, 3]
    transformed_y = cumulative_transform[1, 3]
    transformed_theta = math.atan2(cumulative_transform[1, 0], cumulative_transform[0, 0])

    # Loop to move the robot towards the target position
    while not rospy.is_shutdown():
        # Calculate error from current to destination
        xythetaArray = transformcoordinates(transformed_x, transformed_y, transformed_theta)
        errorArray = cartesian2polar(xythetaArray[0], xythetaArray[1], xythetaArray[2])

        # Control output (velocity and angular velocity)
        vw = compute_vw(errorArray[0], errorArray[1], errorArray[2], 0.15, 0.16, -0.12)

        # Apply the velocity limits
        velocity_publisher(vw[0], vw[1])

                # Initialize cumulative transformation for the destination
        cumulative_transform = np.array([[math.cos(twist_angle), -math.sin(twist_angle), 0, start_x],
                                        [math.sin(twist_angle), math.cos(twist_angle), 0, start_y],
                                        [0, 0, 1, 0],
                                        [0, 0, 0, 1]])
        destination_transform = np.array([
            [math.cos(twist_angleTF), -math.sin(twist_angleTF), 0, (current_xTF-.20)],
            [math.sin(twist_angleTF), math.cos(twist_angleTF), 0, current_yTF+.15],
            [0, 0, 1, 0],
            [0, 0, 0, 1]
        ])


        cumulative_transform = np.matmul(cumulative_transform, destination_transform)

        # Extract transformed position and orientation
        transformed_x = cumulative_transform[0, 3]
        transformed_y = cumulative_transform[1, 3]
        transformed_theta = math.atan2(cumulative_transform[1, 0], cumulative_transform[0, 0])

        # Stop condition for position error
        if abs(errorArray[0]) < 0.08:
            break

        rate.sleep()


    move_cmd = Twist()
    move_cmd.linear.x = 0
    move_cmd.angular.z = 0
    cmd_vel_pub.publish(move_cmd)
